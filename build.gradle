import org.ajoberstar.grgit.Grgit;

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.9.1'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.3.1'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.2'
    compile group: 'io.rest-assured', name: 'json-schema-validator', version: '3.0.2'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.testng', name: 'testng', version: '6.11'
}

test {
    exclude 'org/fundacionjala/pivotal/**'
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}

// gather diffs used for static analysis checks (checkstyle, pmd, findbugs)
def diffs = getLocalDiffs()

/**
 * Returns added or changed files in the working copy.
 * @return list of locally added or changed files (staged or unstaged)
 */
def getLocalDiffs() {
    def grgit = Grgit.open(dir: projectDir)
    def status = grgit.status()
    status.staged.added + status.staged.modified + status.unstaged.added + status.unstaged.modified
}

// Checkstyle configuration
task checkstyleChangedFiles(type: Checkstyle) {
    checkstyle {
        toolVersion = '7.6'
    }

    description 'Runs Checkstyle analysis on modified files.'

    classpath = configurations.compile + configurations.testCompile
    source(diffs)

    doFirst {
        println("Running CheckStyle on " + diffs)
    }
}

// Run first (fail faster) as file changes invalidate tests.
compileJava.mustRunAfter checkstyleChangedFiles

// FindBugs configuration
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// PMD Configuration
tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmdChangedFiles(type: Pmd) {
    pmd {
        toolVersion = '5.5.4'
    }
    description 'Runs PMD analysis on modified files.'
    classpath = configurations.compile + configurations.testCompile
    source(diffs)
    doFirst {
        println("Running PMD on " + diffs)
    }
}

pmdChangedFiles.mustRunAfter testClasses
